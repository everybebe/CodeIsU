package team.tttt.pms.common.user.service.impl;

import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;

import org.apache.ibatis.mapping.ResultSetType;
import org.springframework.stereotype.Service;

import lombok.extern.slf4j.Slf4j;
import net.nurigo.sdk.NurigoApp;
import net.nurigo.sdk.message.model.Message;
import net.nurigo.sdk.message.request.SingleMessageSendingRequest;
import net.nurigo.sdk.message.response.SingleMessageSentResponse;
import net.nurigo.sdk.message.service.DefaultMessageService;
import team.tttt.pms.common.enums.ServiceResult;
import team.tttt.pms.common.user.mapper.UserMapper;
import team.tttt.pms.common.user.service.UserService;
import team.tttt.pms.common.vo.SmsVO;
import team.tttt.pms.common.vo.UserVO;

@Slf4j
@Service
public class UserServiceImpl implements UserService {

	@Inject
	private UserMapper mapper;

	@Override
	public ServiceResult insertUser(UserVO userVO) {
		int cnt = 0;

		// 처음에 userNo 시퀀스
		// 원생 테이블 인서트
		// 권한테이블 인서트




		cnt = mapper.insertUser(userVO);

		System.out.println("cnt값" + cnt);
		if (cnt == 3) {
			return ServiceResult.OK;
		}
		return ServiceResult.FAILED;
	}

	@Override
	public ServiceResult phoneCheck(Map<String, String> phoneInfo) {
		ServiceResult result = ServiceResult.FAILED;

		HashMap<String, Object> searchResult = mapper.phoneCheck(phoneInfo);

		if(searchResult == null) {
			log.info("[회원가입명단체크] 회원가입대기명단에 없는 이름과 연락처 입니다.");
			return ServiceResult.NOTEXIST;
		} else if (searchResult.get("JOIN_DT")!=null) {
			result = ServiceResult.EXIST;
		} else { // 회원정보가 있으나 가입일이 null(아직 미가입일때)
			result = ServiceResult.OK;
		}
		log.info("[회원가입명단체크] " + searchResult.get("USER_NM") + "님  가입가능 유무 " + result);

		return result;
	}

	@Override
	public ServiceResult sendMessage(String phoneNum) {
		ServiceResult result = ServiceResult.FAILED;

		DefaultMessageService messageService = NurigoApp.INSTANCE.initialize("NCSSQBGBL4GRLC0I", "CJPO9BY9DESTZPUOKLXFSLNL5SDAC1EL", "https://api.coolsms.co.kr");

        Message message = new Message();
        message.setFrom("01020007734");
        message.setTo(phoneNum);

        // 네자리 난수 생성
        String ranNum = String.valueOf((int)(Math.random() * 8999) + 1000);

        message.setText("[CodeIsU]본인확인을 위해 인증번호 [" + ranNum + "]를 입력해주세요.");

//        SingleMessageSentResponse response = messageService.sendOne(new SingleMessageSendingRequest(message));
//        System.out.println("[문자전송결과]" + response);

        log.info("[문자전송] " + phoneNum + " ::: " + ranNum + "전송됨");



//        if(!response.getStatusCode().equals("2000")) {
        if(true) {
        	SmsVO smsVO = new SmsVO();
        	smsVO.setSmsRcvr(phoneNum);
        	smsVO.setSmsCn(ranNum);
        	int cnt = mapper.insertSms(smsVO);
        	if(cnt==1) {
        		result = ServiceResult.OK;
        	}
        }

		return result;
	}

	@Override
	public ServiceResult matchNum(SmsVO replyNum) {
		ServiceResult result;

		String severNum = mapper.selectNum(replyNum);

		if(severNum.equals(replyNum.getSmsCn())) {
			result = ServiceResult.MATCH;
		} else {
			result = ServiceResult.NOTEXIST;
		}

		return result;
	}

	@Override
	public Map<String, String> readSvlfNm(String userNm, String userPhone) {


		return mapper.readSvlfNm(userNm, userPhone);
	}




}
