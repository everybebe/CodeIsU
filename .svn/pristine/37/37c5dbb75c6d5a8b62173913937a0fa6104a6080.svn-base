<%@ page language="java" contentType="text/html; charset=UTF-8"
pageEncoding="UTF-8"%>
<link
  rel="stylesheet"
  href="http://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css"
  type="text/css"
/>
<script src="http://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
<script src="${pageContext.request.contextPath}/common/sw/js/GanttChartJs.js"></script>

<style>
  .rowPriority {
    border: 2px solid #56726a;
    color: #56726a;
    background: #56726a;
  }

  .rowPriority .gantt_task_progress {
    background: #404f51;
  }

  .middle {
    border: 2px solid #465b8a;
    color: #465b8a;
    background: #465b8a;
  }

  .middle .gantt_task_progress {
    background: #2d3a5b;
  }

  .high {
    border: 2px solid #d48834;
    color: #d48834;
    background: #d48834;
  }

  .high .gantt_task_progress {
    background: #9d561e;
  }

  .emergency {
    border: 2px solid #d71923;
    color: #d71923;
    background: #d71923;
  }

  .emergency .gantt_task_progress {
    background: #8e0b16;
  }

  .weekend {
	background: #f4f7f4 !important;
  }

	[data-column-name='constraint_type'] .gantt_tree_content {
	padding: 1px;
	line-height: 17px;
	white-space: normal;
	text-align: right;
	box-sizing: border-box;
	}

	.gantt_grid_editor_placeholder[data-column-name='constraint_type'] select {
		line-height: 20px;
		white-space: normal;
	}

	.constraint-marker {
		position: absolute;

		-moz-box-sizing: border-box;
		box-sizing: border-box;

		width: 56px;
		height: 56px;
		margin-top: -11px;

		opacity: 0.4;
		z-index: 1;
		background: url("../common/constraint-arrow.svg") center no-repeat;
		background-size: cover;
	}

	.constraint-marker.earliest-start {
		margin-left: -53px;
	}

	.constraint-marker.latest-end {
		margin-left: -3px;
		transform: rotate(180deg);
	}

	.gantt_link_control {
		z-index: 1;
	}
</style>

<div class="card">
  <div class="table-responsive">
    <div id="taskGantt" style="width: 100%; height: 550px"></div>
  </div>
</div>

<script type="text/javascript">
  projNo = "a005";

  const ganttChartData = (projNo) => {
    $.ajax({
      url: "/pms/project/ganttTask",
      data: {
        projNo: projNo,
      },
      type: "get",
      dataType: "json",
      success: function (res) {
        console.log("원본 데이터 ", res);

        let ganttData = [];

        ganttData = convertData(res);
        ganttLink = convertLink(res);
        console.log("간트차트 링크 ", ganttLink);

        // 간트차트 api 시작

        gantt.config.xml_date = "%Y-%m-%d %H:%i";
        gantt.i18n.setLocale("kr");

        gantt.attachEvent("onAfterTaskDrag", function (id, mode) {
          var task = gantt.getTask(id);
          if (mode == gantt.config.drag_mode.progress) {
            var pr = Math.floor(task.progress * 100 * 10) / 10;
            gantt.message(task.text + " is now " + pr + "% completed!");
            console.log('간트 차트 onAfterTaskDrag if task', task)
            console.log('간트 차트 onAfterTaskDrag if task.text', task.text)
            console.log('간트 차트 onAfterTaskDrag if pr', pr)
          } else {
            var convert = gantt.date.date_to_str("%H:%i, %F %j");
            var s = convert(task.start_date);
            var e = convert(task.end_date);
            console.log('간트 차트 onAfterTaskDrag else'+task.text + "시작 " + s + " 끝 " + e);
          }
        });

        gantt.attachEvent("onBeforeTaskChanged", function (id, mode, old_event) {
          var task = gantt.getTask(id);
          if (mode == gantt.config.drag_mode.progress) {
            if (task.progress < old_event.progress) {
              console.log('간트 차트 onBeforeTaskChanged'+ task.text)
              return false;
            }
          }
          return true;
        });

        gantt.attachEvent("onBeforeTaskDrag", function (id, mode) {
          var task = gantt.getTask(id);
          var message = task.text + " ";

          if (mode == gantt.config.drag_mode.progress) {
            message += "progress is being updated";
          } else {
            message += "is being ";
            if (mode == gantt.config.drag_mode.move)
              message += "moved";
            else if (mode == gantt.config.drag_mode.resize)
              message += "resized";
          }

          console.log(message)
          return true;
        });


        gantt.init("taskGantt");

        gantt.config.columns = [
          {
            name: "text",
            label: "일감 명",
            tree: true,
            width: "*",
            resize: true,
          },
          {
            name: "start_date",
            label: "시작일",
            align: "center",
            resize: true,
          },
          { name: "duration", label: "D-Day", align: "center", resize: true },
          {
            name: "priority",
            label: "우선순위",
            align: "center",

            template: function (obj) {
              if (obj.priority == 1) {
                return "낮음";
              }
              if (obj.priority == 2) {
                return "보통";
              }
              if (obj.priority == 3) {
                return "높음";
              }
              return "긴급";
            },
          },
        ];

        gantt.templates.task_class = function (start, end, task) {
          switch (task.priority) {
            case "1":
              return "rowPriority";
              break;
            case "2":
              return "middle";
              break;
            case "3":
              return "high";
              break;
            case "4":
              return "emergency";
              break;
          }
        };
        gantt.parse({
          data: ganttData,
          links: ganttLink,
        });
      },
    });
  };

  const convertData = (res) => {
    let ganttData = [];

    // 프로젝트 날짜 계산
    let projBgngDt = Date.parse(res[0].projBgngDt);
    let projDdlnDt = Date.parse(res[0].projDdlnDt);
    let duration = projDdlnDt - projBgngDt;
    duration = Math.ceil(duration / (1000 * 60 * 60 * 24));

    let start_date = res[0].projBgngDt + " 00:00";
    // 프로젝트 날짜 계산 끝

    let projSttr = res[0].projSttr / 100;


    convertDatas = {
        id: res[0].projNo,
        text: res[0].projNm,
        start_date: start_date,
        duration: duration,
        progress: projSttr,
        open: true,
      };

      ganttData.push(convertDatas);


    for (let i = 0; i < res.length; i++) {
      // 남은일, 시작일 계산
      let taskBengDt = Date.parse(res[i].taskBengDt);
      let taskDdlnDt = Date.parse(res[i].taskDdlnDt);

      let duration = taskDdlnDt - taskBengDt;

      duration = Math.ceil(duration / (1000 * 60 * 60 * 24));
      let start_date = res[i].taskBengDt + " 00:00";

      if (res[i].upperTask === null) {
        res[i].upperTask = 0;
      }
      // 끝

      // 진행율 계산
      taskSttr = res[i].taskSttr / 100;

      // 우선순위 계산
      let taskStts;
      if (res[i].taskPriority == "낮음") {
        taskStts = "1";
      } else if (res[i].taskPriority == "보통") {
        taskStts = "2";
      } else if (res[i].taskPriority == "높음") {
        taskStts = "3";
      } else if (res[i].taskPriority == "긴급") {
        taskStts = "4";
      }

      convertDatas = {
        id: res[i].taskNo,
        text: res[i].taskTitle,
        start_date: start_date,
        duration: duration,
        parent: res[i].upperTask,
        progress: taskSttr,
        open: true,
        priority: taskStts,
      };

      ganttData.push(convertDatas);
    }
    console.log("간트차트 형식 데이터", ganttData);
    return ganttData;
  };

  const convertLink = (res) => {
    let ganttLinks = [];

    for (let i = 0; i < res.length; i++) {
      for (let j = 0; j < res.length; j++) {
        if (res[j].taskNo == res[i].upperTask) {
          let ganttLink = {
            id: res[i].upperTask,
            source: res[i].upperTask,
            target: res[i].taskNo,
            type: "1",
          };

          ganttLinks.push(ganttLink);
        }
      }
    }
    return ganttLinks;
  };

  ganttChartData(projNo);
</script>
